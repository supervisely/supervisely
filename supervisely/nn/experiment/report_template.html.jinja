<div class="model-benchmark-body">

    <sly-style>
        .model-benchmark-body h1 {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 5px;
        }
        .model-benchmark-body .sly-markdown-widget .markdown-body {
        padding: 0;
        font-family: inherit;
        }
        .model-benchmark-body .sly-markdown-widget .markdown-body h2 {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 0px;
        border: 0;
        }
        .model-benchmark-body .sly-markdown-widget .markdown-body h3 {
        color: #949bab;
        font-size: 18px;
        margin-bottom: 7px;
        }
        .model-benchmark-body .sly-markdown-widget .markdown-body p {
        margin-bottom: 12px;
        }

        .model-benchmark-body .section {
        margin-bottom: 30px;
        scroll-margin-top: 20px;
        padding-top: 10px;
        }
        .model-benchmark-body .overview-info-block {
        background: #f4f7fb;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        }
        .model-benchmark-body .width-fit-content {
        width: fit-content;
        }
        .model-benchmark-body .main-content {
        flex-grow: 1;
        }

        .model-benchmark-body .buttons-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
        }

        .model-benchmark-body table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        }
        .model-benchmark-body table th,
        .model-benchmark-body table td {
        border: 1px solid #e0e0e0;
        padding: 8px 12px;
        text-align: left;
        }
        .model-benchmark-body table th {
        background-color: #f4f7fb;
        }
        .model-benchmark-body .metrics-table,
        .model-benchmark-body .checkpoints-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        border-radius: 6px;
        overflow: hidden;
        }
        .model-benchmark-body .metrics-table th,
        .model-benchmark-body .checkpoints-table th {
        background-color: #f4f7fb;
        font-weight: 600;
        color: #333;
        padding: 12px 15px;
        text-align: left;
        border-bottom: 2px solid #e0e0e0;
        }
        .model-benchmark-body .metrics-table td,
        .model-benchmark-body .checkpoints-table td {
        padding: 10px 15px;
        border-bottom: 1px solid #e9ecef;
        }
        .model-benchmark-body .metrics-table tr:hover,
        .model-benchmark-body .checkpoints-table tr:hover {
        background-color: #f8f9fa;
        }

        .model-benchmark-body .links-list,
        .model-benchmark-body .overview-list,
        .model-benchmark-body .buttons-list {
        list-style-type: none;
        padding: 0;
        margin: 0 0 20px 0;
        }
        .model-benchmark-body .links-list li,
        .model-benchmark-body .overview-list li,
        .model-benchmark-body .buttons-list li {
        margin-bottom: 8px;
        position: relative;
        padding-left: 8px;
        display: flex;
        align-items: flex-start;
        }
        .model-benchmark-body .links-list li:before,
        .model-benchmark-body .buttons-list li:before {
        content: "•";
        color: #1890ff;
        display: inline-block;
        width: 15px;
        margin-right: 10px;
        }
        .model-benchmark-body .overview-list li:before {
        content: "";
        display: none;
        }
        .model-benchmark-body .link-icon,
        .model-benchmark-body .button-icon {
        margin-right: 8px;
        }
        .model-benchmark-body .overview-list .label {
        font-weight: 600;
        margin-right: 8px;
        min-width: 120px;
        display: inline-block;
        }

        /* Code */
        .model-benchmark-body .code-block {
        background-color: #f5f5f5;
        border-radius: 6px;
        padding: 15px;
        margin-bottom: 20px;
        overflow-x: auto;
        }

        .model-benchmark-body details {
        border-radius: 6px;
        overflow: hidden;
        margin-bottom: 20px;
        }
        .model-benchmark-body details summary {
        padding: 12px 15px;
        background-color: #f4f7fb;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.2s;
        }
        .model-benchmark-body details summary:hover {
        background-color: #e6edf7;
        }
        .model-benchmark-body details[open] summary {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        margin-bottom: 0;
        }

        html {
        scroll-behavior: smooth;
        }
    </sly-style>

    <!-- Sidebar navigation -->
    <sly-iw-sidebar
        :options="{ height: 'calc(100vh - 130px)', clearMainPanelPaddings: true, leftSided: false, disableResize: true, sidebarWidth: 300 }">
        <div slot="sidebar">
            <div>
                <el-button type="text" @click="data.scrollIntoView='overview-markdown-section'"
                    :style="{fontWeight: data.scrollIntoView === 'overview-markdown-section' ? 'bold' : 'normal'}">
                    Overview
                </el-button>
            </div>

            {% if artifacts.checkpoints_table %}
            <div>
                <el-button type="text" @click="data.scrollIntoView='checkpoints-markdown-section'"
                    :style="{fontWeight: data.scrollIntoView === 'checkpoints-markdown-section' ? 'bold' : 'normal'}">
                    Checkpoints
                </el-button>
            </div>
            {% endif %}

            {% if artifacts.metrics_table %}
            <div>
                <el-button type="text" @click="data.scrollIntoView='metrics-markdown-section'"
                    :style="{fontWeight: data.scrollIntoView === 'metrics-markdown-section' ? 'bold' : 'normal'}">
                    Metrics
                </el-button>
            </div>
            {% endif %}

            {% if artifacts.hyperparameters %}
            <div>
                <el-button type="text" @click="data.scrollIntoView='hyperparameters-markdown-section'"
                    :style="{fontWeight: data.scrollIntoView === 'hyperparameters-markdown-section' ? 'bold' : 'normal'}">
                    Hyperparameters
                </el-button>
            </div>
            {% endif %}

            <div>
                <el-button type="text" @click="data.scrollIntoView='model-api-markdown-section'"
                    :style="{fontWeight: data.scrollIntoView === 'model-api-markdown-section' ? 'bold' : 'normal'}">
                    Model API
                </el-button>
            </div>

            <div>
                <el-button type="text" @click="data.scrollIntoView='docker-markdown-section'"
                    :style="{fontWeight: data.scrollIntoView === 'docker-markdown-section' ? 'bold' : 'normal'}">
                    Docker
                </el-button>
            </div>

            {% if code.local_prediction.serving_class and code.local_prediction.serving_module %}
            <div>
                <el-button type="text" @click="data.scrollIntoView='local-prediction-markdown-section'"
                    :style="{fontWeight: data.scrollIntoView === 'local-prediction-markdown-section' ? 'bold' : 'normal'}">
                    Predict Locally
                </el-button>
            </div>
            {% endif %}
        </div>

        <!-- Main content -->
        <div class="main-content">
            <h1>{{ experiment.name }}</h1>

            <!-- Overview -->
            <div id="overview-markdown-section"
                class="iw-widget markdown-no-border overview-info-block width-fit-content section">
                {% markdown %}
                - **Model**: {{ experiment.model_name }}
                - **Task**: {{ experiment.task_name }}
                - **Framework**: {{ experiment.framework_name }}
                - **Project**: {{ project.name }}
                - **Train size**: {{ project.train_size }} {{ project.type }}
                - **Validation size**: {{ project.val_size }} {{ project.type }}
                - **Classes**: {{ project.classes_count }}
                - **Class names**: {{ project.class_names }}
                - **Date**: {{ experiment.date }}
                {% endmarkdown %}
            </div>

            <!-- Links -->
            <h2>Links</h2>
            <div class="section">
                <ul class="links-list">
                    <li><span class="link-icon">🎓</span> <a href="{{ links.training_session.url }}" target="_blank">Training
                            Task</a></li>
                    {% if links.evaluation_report.url %}
                    <li><span class="link-icon">📊</span> <a href="{{ links.evaluation_report.url }}"
                            target="_blank">Evaluation Report</a></li>
                    {% endif %}
                    {% if links.tensorboard_logs.url %}
                    <li><span class="link-icon">⚡</span> <a href="{{ links.tensorboard_logs.url }}"
                            target="_blank">TensorBoard Logs</a></li>
                    {% endif %}
                    <li><span class="link-icon">💾</span> <a href="{{ links.team_files.url }}" target="_blank">Open in Team
                            Files</a></li>
                </ul>
            </div>

            <!-- Buttons -->
            <h2>Buttons</h2>
            <div class="section buttons-container">
                <ul class="buttons-list">
                    <li><span class="button-icon">🚀</span> Deploy (PyTorch)</li>
                    {% if buttons.has_tensorrt %}
                    <li><span class="button-icon">🚀</span> Deploy (TensorRT)</li>
                    {% endif %}
                    {% if buttons.has_onnx %}
                    <li><span class="button-icon">🚀</span> Deploy (ONNX)</li>
                    {% endif %}
                    <li><span class="button-icon">⏩</span> Fine-tune</li>
                    <li><span class="button-icon">🔄</span> Re-train</li>
                    <li><span class="button-icon">📦</span> Download model</li>
                    <li><span class="button-icon">❌</span> Remove permamently</li>
                </ul>
            </div>

            <!-- Checkpoints -->
            {% if artifacts.checkpoints_table %}
            <div id="checkpoints-markdown-section" class="section">
                <h2>Checkpoints</h2>
                {{ artifacts.checkpoints_table | safe }}
            </div>
            {% endif %}

            <!-- Metrics -->
            {% if artifacts.metrics_table %}
            <div id="metrics-markdown-section" class="section">
                <h2>Metrics</h2>
                {{ artifacts.metrics_table | safe }}
            </div>
            {% endif %}

            <!-- Hyperparameters -->
            {% if artifacts.hyperparameters %}
            <div id="hyperparameters-markdown-section" class="section">
                <h2>Training Hyperparameters</h2>
                <details>
                    <summary>Click to expand hyperparameters</summary>
                    <div class="code-block">
                        <pre><code>{{ artifacts.hyperparameters }}</code></pre>
                    </div>
                </details>
            </div>
            {% endif %}

            <!-- Model API -->
            <div id="model-api-markdown-section" class="section">
                {% markdown %}
                ## Model API

                Deploy and predict in Supervisely.

                ```python
                import supervisely as sly

                api = sly.Api()

                # Deploy
                model = api.nn.deploy_custom_model(checkpoint_id={checkpoint_path}) # file id

                # Predict
                prediction = model.predict(images="image.png") # image | path | url
                ```

                See more in [Deploy and Predict with Supervisely
                SDK](https://docs.supervisely.com/neural-networks/overview-1/deploy_and_predict_with_supervisely_sdk)
                documentation.
                {% endmarkdown %}
            </div>

            <!-- Docker -->
            <div id="docker-markdown-section" class="section">
                {% markdown %}
                ## Docker

                Predict using Docker container.

                1. Download checkpoint from Supervisely - [open checkpoint directory]({{ links.checkpoint_dir_url }})
                2. Pull the Docker image

                    ```bash
                    docker pull {{ code.docker.image }}
                    ```

                3. Run the Docker container

                    ```bash
                    docker run \\
                        --runtime=nvidia \\
                        -v "./{experiment_dir}:/model" \\
                        -p 8000:8000 \\
                        {{ code.docker.image }} \\
                        predict \\
                        "./image.jpg" \\
                        --model "/model" \\
                        --device "cuda:0\""""
                    ```

                See more in [Deploy in Docker
                Container](https://docs.supervisely.com/neural-networks/overview-1/deploy_and_predict_with_supervisely_sdk#deploy-in-docker-container)
                documentation.
                {% endmarkdown %}
            </div>

            <!-- Local Prediction -->
            {% if code.local_prediction.serving_class and code.local_prediction.serving_module %}
            <div id="local-prediction-markdown-section" class="section">
                {% markdown %}
                ## Predict Locally

                Predict using local inference.

                1. Download checkpoint from Supervisely - [open checkpoint directory]({{ links.checkpoint_dir_url }})
                2. Clone repository

                    ```bash
                    git clone {{ code.local_prediction.repo_url }}
                    cd {{ code.local_prediction.repo_name }}
                    ```

                3. Install requirements

                    ```bash
                    pip install -r dev_requirements.txt
                    pip install supervisely
                    ```

                4. Run inference

                    ```python
                    # Be sure you are in the root of the {{ code.local_prediction.repo_name }} repository
                    from {{ code.local_prediction.serving_module }} import {{ code.local_prediction.serving_class }}

                    # Load model
                    model = {{ code.local_prediction.serving_class }}(
                        checkpoint="./{{ artifacts.experiment_dir }}/checkpoints/{{ artifacts.best_checkpoint }}", # path to the checkpoint
                        device="cuda",
                    )

                    # Predict
                    prediction = model(
                        "image.png", # local paths, directory, local project, np.array, PIL.Image, URL
                        params={"confidence_threshold": 0.5}
                    )
                    ```

                See more in [Predict
                Locally](https://docs.supervisely.com/neural-networks/overview-1/deploy_and_predict_with_supervisely_sdk#predict-locally)
                documentation.
                {% endmarkdown %}

                {% if artifacts.optimized_checkpoint %}
                <div>
                    {% markdown %}
                    ### Using optimized models

                    ```python
                    # Be sure you are in the root of the {{ code.local_prediction.repo_name }} repository
                    from {{ code.local_prediction.serving_module }} import {{ code.local_prediction.serving_class }}

                    model = {{ code.local_prediction.serving_class }}(
                    model_dir="./{{ artifacts.experiment_dir }}",
                    checkpoint="{{ artifacts.optimized_checkpoint }}",
                    device="cuda",
                    )
                    ```
                    {% endmarkdown %}
                </div>
                {% endif %}
            </div>
            {% endif %}
        </div>
    </sly-iw-sidebar>
</div>